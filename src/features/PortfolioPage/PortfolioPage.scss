@use "sass:math";

@use "../../global/styles/config.scss";
@use "../../global/styles/mixins/_visuallyHidden.scss";

// It would be pretty cool to provide the user a toggle between css columns, flexbox, and css grid. Yup, this could be very cool, show a small animation on every transition
.PortfolioPage {
  &-searchBar {
    display: block;
    width: 100%;
    border: solid 1px config.$black;
    &-selectedTag {
      display: inline-block;
    }
    &-searchInput {
      border: none;
    }
    &-dropdown {
      display: none;
      &-visible {
        display: block;
      }
    }
  }
  &-images {
    display: grid;
    grid: auto / repeat(auto-fit, minmax(240px, 1fr));
    gap: 1em;
    place-content: start;
    place-items: stretch;
  }
  &-figure {
    height: 100%;
    position: relative;
    place-self: stretch end;
    margin: auto;
    display: flex;
    &--hidden {
      display: none;
    }
  }
  // Accessibly hide figcaption unless parent is hovered
  &-figcaption {
    @include visuallyHidden.visuallyHidden;
    :hover > & {
      @include visuallyHidden.visuallyHiddenReset;
      display: flex;
      flex-direction: column;
      position: absolute;
      justify-content: center;
      align-items: center;
      height: 100%;
      width: 100%;
      padding: 0 12px;
      background-color: rgba(0, 0, 0, 0.5);
      color: white;
      text-align: center;
      cursor: pointer;
      overflow: hidden;
    }
    &-header {
      margin: auto 0;
    }
    &-description {
      margin: auto 0;
    }
    &-tags {
      list-style: none;
      margin: auto 0;
      padding: 0;
      &-tag {
        font-size: 11px;
        position: relative;
        display: inline-block;
        line-height: 1;
        padding: 0.5em 1.5em;
        margin: 0 calc(1em / 6) calc(1em / 3) 1em;
        border-radius: 0 calc(1em / 3) calc(1em / 3) 0;
        background-color: blue;
        &::before {
          position: absolute;
          display: block;
          content: "";
          height: 2em / math.sqrt(2);
          width: 2em / math.sqrt(2);
          top: 50%;
          right: 100%;
          transform: translateY(-50%) translateX(50%) rotate(45deg);
          background-color: inherit;
        }
        &::after {
          position: absolute;
          display: block;
          content: "";
          height: 0.5em;
          width: 0.5em;
          top: 50%;
          left: -0.25em;
          background-color: white;
          box-shadow: 0px -1px 1px 0px rgba(0, 0, 0, 0.3);
          border-radius: 0.25em;
          transform: translateY(-50%) translateX(50%);
        }
      }
    }
  }
}
